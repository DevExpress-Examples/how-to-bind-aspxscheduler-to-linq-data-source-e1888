#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="CarsXtraSchedulingLinq")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCar(Car instance);
  partial void UpdateCar(Car instance);
  partial void DeleteCar(Car instance);
  partial void InsertCarScheduling(CarScheduling instance);
  partial void UpdateCarScheduling(CarScheduling instance);
  partial void DeleteCarScheduling(CarScheduling instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CarsXtraSchedulingLinqConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Car> Cars
	{
		get
		{
			return this.GetTable<Car>();
		}
	}
	
	public System.Data.Linq.Table<CarScheduling> CarSchedulings
	{
		get
		{
			return this.GetTable<CarScheduling>();
		}
	}
}

[Table(Name="dbo.Cars")]
public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Model;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    #endregion
	
	public Car()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Model", DbType="NVarChar(50)")]
	public string Model
	{
		get
		{
			return this._Model;
		}
		set
		{
			if ((this._Model != value))
			{
				this.OnModelChanging(value);
				this.SendPropertyChanging();
				this._Model = value;
				this.SendPropertyChanged("Model");
				this.OnModelChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.CarScheduling")]
public partial class CarScheduling : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _CarId;
	
	private System.Nullable<int> _Status;
	
	private string _Subject;
	
	private string _Description;
	
	private System.Nullable<int> _Label;
	
	private System.Nullable<System.DateTime> _StartTime;
	
	private System.Nullable<System.DateTime> _EndTime;
	
	private string _Location;
	
	private bool _AllDay;
	
	private System.Nullable<int> _EventType;
	
	private string _RecurrenceInfo;
	
	private string _ReminderInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCarIdChanging(System.Nullable<int> value);
    partial void OnCarIdChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLabelChanging(System.Nullable<int> value);
    partial void OnLabelChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnAllDayChanging(bool value);
    partial void OnAllDayChanged();
    partial void OnEventTypeChanging(System.Nullable<int> value);
    partial void OnEventTypeChanged();
    partial void OnRecurrenceInfoChanging(string value);
    partial void OnRecurrenceInfoChanged();
    partial void OnReminderInfoChanging(string value);
    partial void OnReminderInfoChanged();
    #endregion
	
	public CarScheduling()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_CarId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CarId
	{
		get
		{
			return this._CarId;
		}
		set
		{
			if ((this._CarId != value))
			{
				this.OnCarIdChanging(value);
				this.SendPropertyChanging();
				this._CarId = value;
				this.SendPropertyChanged("CarId");
				this.OnCarIdChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Subject", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnSubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("Subject");
				this.OnSubjectChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Label", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> Label
	{
		get
		{
			return this._Label;
		}
		set
		{
			if ((this._Label != value))
			{
				this.OnLabelChanging(value);
				this.SendPropertyChanging();
				this._Label = value;
				this.SendPropertyChanged("Label");
				this.OnLabelChanged();
			}
		}
	}
	
	[Column(Storage="_StartTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> StartTime
	{
		get
		{
			return this._StartTime;
		}
		set
		{
			if ((this._StartTime != value))
			{
				this.OnStartTimeChanging(value);
				this.SendPropertyChanging();
				this._StartTime = value;
				this.SendPropertyChanged("StartTime");
				this.OnStartTimeChanged();
			}
		}
	}
	
	[Column(Storage="_EndTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> EndTime
	{
		get
		{
			return this._EndTime;
		}
		set
		{
			if ((this._EndTime != value))
			{
				this.OnEndTimeChanging(value);
				this.SendPropertyChanging();
				this._EndTime = value;
				this.SendPropertyChanged("EndTime");
				this.OnEndTimeChanged();
			}
		}
	}
	
	[Column(Storage="_Location", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[Column(Storage="_AllDay", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool AllDay
	{
		get
		{
			return this._AllDay;
		}
		set
		{
			if ((this._AllDay != value))
			{
				this.OnAllDayChanging(value);
				this.SendPropertyChanging();
				this._AllDay = value;
				this.SendPropertyChanged("AllDay");
				this.OnAllDayChanged();
			}
		}
	}
	
	[Column(Storage="_EventType", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> EventType
	{
		get
		{
			return this._EventType;
		}
		set
		{
			if ((this._EventType != value))
			{
				this.OnEventTypeChanging(value);
				this.SendPropertyChanging();
				this._EventType = value;
				this.SendPropertyChanged("EventType");
				this.OnEventTypeChanged();
			}
		}
	}
	
	[Column(Storage="_RecurrenceInfo", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string RecurrenceInfo
	{
		get
		{
			return this._RecurrenceInfo;
		}
		set
		{
			if ((this._RecurrenceInfo != value))
			{
				this.OnRecurrenceInfoChanging(value);
				this.SendPropertyChanging();
				this._RecurrenceInfo = value;
				this.SendPropertyChanged("RecurrenceInfo");
				this.OnRecurrenceInfoChanged();
			}
		}
	}
	
	[Column(Storage="_ReminderInfo", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string ReminderInfo
	{
		get
		{
			return this._ReminderInfo;
		}
		set
		{
			if ((this._ReminderInfo != value))
			{
				this.OnReminderInfoChanging(value);
				this.SendPropertyChanging();
				this._ReminderInfo = value;
				this.SendPropertyChanged("ReminderInfo");
				this.OnReminderInfoChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
