'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection



<System.Data.Linq.Mapping.DatabaseAttribute(Name:="CarsXtraSchedulingLinq")> _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext

	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCar(ByVal instance As Car)
  End Sub
  Partial Private Sub UpdateCar(ByVal instance As Car)
  End Sub
  Partial Private Sub DeleteCar(ByVal instance As Car)
  End Sub
  Partial Private Sub InsertCarScheduling(ByVal instance As CarScheduling)
  End Sub
  Partial Private Sub UpdateCarScheduling(ByVal instance As CarScheduling)
  End Sub
  Partial Private Sub DeleteCarScheduling(ByVal instance As CarScheduling)
  End Sub
  #End Region

	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("CarsXtraSchedulingLinqConnectionString").ConnectionString, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public ReadOnly Property Cars() As System.Data.Linq.Table(Of Car)
		Get
			Return Me.GetTable(Of Car)()
		End Get
	End Property

	Public ReadOnly Property CarSchedulings() As System.Data.Linq.Table(Of CarScheduling)
		Get
			Return Me.GetTable(Of CarScheduling)()
		End Get
	End Property
End Class

<Table(Name:="dbo.Cars")> _
Partial Public Class Car
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _ID As Integer

	Private _Model As String

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnIDChanged()
	End Sub
	Partial Private Sub OnModelChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnModelChanged()
	End Sub
	#End Region

	Public Sub New()
		OnCreated()
	End Sub

	<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set(ByVal value As Integer)
			If (Me._ID <> value) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging()
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_Model", DbType:="NVarChar(50)")> _
	Public Property Model() As String
		Get
			Return Me._Model
		End Get
		Set(ByVal value As String)
			If (Me._Model <> value) Then
				Me.OnModelChanging(value)
				Me.SendPropertyChanging()
				Me._Model = value
				Me.SendPropertyChanged("Model")
				Me.OnModelChanged()
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CarScheduling")> _
Partial Public Class CarScheduling
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _ID As Integer

	Private _CarId As System.Nullable(Of Integer)

	Private _Status As System.Nullable(Of Integer)

	Private _Subject As String

	Private _Description As String

	Private _Label As System.Nullable(Of Integer)

	Private _StartTime As System.Nullable(Of System.DateTime)

	Private _EndTime As System.Nullable(Of System.DateTime)

	Private _Location As String

	Private _AllDay As Boolean

	Private _EventType As System.Nullable(Of Integer)

	Private _RecurrenceInfo As String

	Private _ReminderInfo As String

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnIDChanged()
	End Sub
	Partial Private Sub OnCarIdChanging(ByVal value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnCarIdChanged()
	End Sub
	Partial Private Sub OnStatusChanging(ByVal value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnStatusChanged()
	End Sub
	Partial Private Sub OnSubjectChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSubjectChanged()
	End Sub
	Partial Private Sub OnDescriptionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnDescriptionChanged()
	End Sub
	Partial Private Sub OnLabelChanging(ByVal value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnLabelChanged()
	End Sub
	Partial Private Sub OnStartTimeChanging(ByVal value As System.Nullable(Of System.DateTime))
	End Sub
	Partial Private Sub OnStartTimeChanged()
	End Sub
	Partial Private Sub OnEndTimeChanging(ByVal value As System.Nullable(Of System.DateTime))
	End Sub
	Partial Private Sub OnEndTimeChanged()
	End Sub
	Partial Private Sub OnLocationChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnLocationChanged()
	End Sub
	Partial Private Sub OnAllDayChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnAllDayChanged()
	End Sub
	Partial Private Sub OnEventTypeChanging(ByVal value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnEventTypeChanged()
	End Sub
	Partial Private Sub OnRecurrenceInfoChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRecurrenceInfoChanged()
	End Sub
	Partial Private Sub OnReminderInfoChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnReminderInfoChanged()
	End Sub
	#End Region

	Public Sub New()
		OnCreated()
	End Sub

	<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set(ByVal value As Integer)
			If (Me._ID <> value) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging()
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_CarId", DbType:="Int", UpdateCheck:=UpdateCheck.Never)> _
	Public Property CarId() As System.Nullable(Of Integer)
		Get
			Return Me._CarId
		End Get
		Set(ByVal value As System.Nullable(Of Integer))
			If (Not Me._CarId.Equals(value)) Then
				Me.OnCarIdChanging(value)
				Me.SendPropertyChanging()
				Me._CarId = value
				Me.SendPropertyChanged("CarId")
				Me.OnCarIdChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_Status", DbType:="Int", UpdateCheck:=UpdateCheck.Never)> _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set(ByVal value As System.Nullable(Of Integer))
			If (Not Me._Status.Equals(value)) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging()
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_Subject", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)> _
	Public Property Subject() As String
		Get
			Return Me._Subject
		End Get
		Set(ByVal value As String)
			If (Me._Subject <> value) Then
				Me.OnSubjectChanging(value)
				Me.SendPropertyChanging()
				Me._Subject = value
				Me.SendPropertyChanged("Subject")
				Me.OnSubjectChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set(ByVal value As String)
			If (Me._Description <> value) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging()
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_Label", DbType:="Int", UpdateCheck:=UpdateCheck.Never)> _
	Public Property Label() As System.Nullable(Of Integer)
		Get
			Return Me._Label
		End Get
		Set(ByVal value As System.Nullable(Of Integer))
			If (Not Me._Label.Equals(value)) Then
				Me.OnLabelChanging(value)
				Me.SendPropertyChanging()
				Me._Label = value
				Me.SendPropertyChanged("Label")
				Me.OnLabelChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_StartTime", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)> _
	Public Property StartTime() As System.Nullable(Of System.DateTime)
		Get
			Return Me._StartTime
		End Get
		Set(ByVal value As System.Nullable(Of System.DateTime))
			If (Not Me._StartTime.Equals(value)) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging()
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_EndTime", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)> _
	Public Property EndTime() As System.Nullable(Of System.DateTime)
		Get
			Return Me._EndTime
		End Get
		Set(ByVal value As System.Nullable(Of System.DateTime))
			If (Not Me._EndTime.Equals(value)) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging()
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_Location", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)> _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set(ByVal value As String)
			If (Me._Location <> value) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging()
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_AllDay", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)> _
	Public Property AllDay() As Boolean
		Get
			Return Me._AllDay
		End Get
		Set(ByVal value As Boolean)
			If (Me._AllDay <> value) Then
				Me.OnAllDayChanging(value)
				Me.SendPropertyChanging()
				Me._AllDay = value
				Me.SendPropertyChanged("AllDay")
				Me.OnAllDayChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_EventType", DbType:="Int", UpdateCheck:=UpdateCheck.Never)> _
	Public Property EventType() As System.Nullable(Of Integer)
		Get
			Return Me._EventType
		End Get
		Set(ByVal value As System.Nullable(Of Integer))
			If (Not Me._EventType.Equals(value)) Then
				Me.OnEventTypeChanging(value)
				Me.SendPropertyChanging()
				Me._EventType = value
				Me.SendPropertyChanged("EventType")
				Me.OnEventTypeChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_RecurrenceInfo", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
	Public Property RecurrenceInfo() As String
		Get
			Return Me._RecurrenceInfo
		End Get
		Set(ByVal value As String)
			If (Me._RecurrenceInfo <> value) Then
				Me.OnRecurrenceInfoChanging(value)
				Me.SendPropertyChanging()
				Me._RecurrenceInfo = value
				Me.SendPropertyChanged("RecurrenceInfo")
				Me.OnRecurrenceInfoChanged()
			End If
		End Set
	End Property

	<Column(Storage:="_ReminderInfo", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
	Public Property ReminderInfo() As String
		Get
			Return Me._ReminderInfo
		End Get
		Set(ByVal value As String)
			If (Me._ReminderInfo <> value) Then
				Me.OnReminderInfoChanging(value)
				Me.SendPropertyChanging()
				Me._ReminderInfo = value
				Me.SendPropertyChanged("ReminderInfo")
				Me.OnReminderInfoChanged()
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
